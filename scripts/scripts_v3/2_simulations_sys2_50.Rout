
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## ----load_lib, include = FALSE, warning=FALSE, message=FALSE, echo=FALSE-------------------------------------------------------------
> library(here)
here() starts at /home/seraphinashi/undersmoothedHAL_CausalEffects
> library(data.table)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:data.table’:

    between, first, last

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tidyr)
> library(foreach)
> 
> library(stringr)
> library(glmnet)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loaded glmnet 4.1-3
> 
> library(origami)
origami v1.0.5: Generalized Framework for Cross-Validation
> library(hal9001)
Loading required package: Rcpp
hal9001 v0.4.3: The Scalable Highly Adaptive Lasso
note: fit_hal defaults have changed. See ?fit_hal for details
> library(tictoc)

Attaching package: ‘tictoc’

The following object is masked from ‘package:data.table’:

    shift

> 
> library(R.utils)
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.8.1 (2020-08-26 16:20:06 UTC) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.24.0 (2020-08-26 16:11:58 UTC) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:R.methodsS3’:

    throw

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, load, save

R.utils v2.12.0 (2022-06-28 03:20:05 UTC) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:tidyr’:

    extract

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, isOpen, nullfile, parse, warnings

> 
> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:stats’:

    cov, smooth, var

> 
> library(ggplot2)
> library(cowplot)
> library(gridExtra)

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> library(grid)
> 
> 
> ## ----setup, include = FALSE----------------------------------------------------------------------------------------------------------
> plotFolder <- here("results","images", "v3")
> if(!file.exists(plotFolder)) dir.create(plotFolder,recursive=TRUE)
> 
> knitr::opts_chunk$set(
+   cache=FALSE, autodep=FALSE, warning=FALSE, message=FALSE, echo=FALSE,
+   results = 'markup', dev='png', dpi=150, fig.align = "center", fig.path=paste0(plotFolder, "/"),
+   cache.path=".cache/",
+   duplicate.label="allow"
+ )
> 
> source(here("scripts", "scripts_v3", "1_simu_functions_hal9001.R"))
> source(here("scripts", "scripts_v3", "1_simu_functions.R"))
> 
> 
> 
> ## ----check_sys2----------------------------------------------------------------------------------------------------------------------
> generate_data_2 <- function(n, a=NA, z=NA){
+   # exogenous variables
+   U_W <- rnorm(n, 0, 1)
+   U_A <- rnorm(n, 0, 2)
+   U_Z <- runif(n, 0, 1)
+   U_Y <- runif(n, 0, 1)
+   
+   # endogenous variables
+   W <- U_W
+   
+   if(is.na(a)){
+     A <-  2 - 0.5*W + U_A
+     A[A<=0] = 0
+     A[A>=5] = 5
+   } else {
+     A <- rep(a, n)
+   }
+   
+   if(is.na(z)){
+     Z <- as.numeric(U_Z < plogis(2-W-A))
+   } else {
+     Z <- rep(z, n)
+   }
+   
+   Y <- as.numeric(U_Y < plogis(-4 * W + 5*A + 10*Z + 5*W*Z + 2 * A * Z * W - 15))
+   
+   # data frame
+   O <- data.frame(W, A, Z, Y)
+   return(O)
+ }
> 
> obs <- generate_data_2(n=10000)
> print(summary(obs))
       W                   A                Z                Y         
 Min.   :-3.529286   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  
 1st Qu.:-0.680119   1st Qu.:0.6036   1st Qu.:0.0000   1st Qu.:0.0000  
 Median :-0.005018   Median :2.0225   Median :0.0000   Median :0.0000  
 Mean   :-0.007358   Mean   :2.1193   Mean   :0.4945   Mean   :0.4404  
 3rd Qu.: 0.668760   3rd Qu.:3.3897   3rd Qu.:1.0000   3rd Qu.:1.0000  
 Max.   : 3.553533   Max.   :5.0000   Max.   :1.0000   Max.   :1.0000  
>   
> # check positivity violations
> cat("Summary of A given W < -1:")
Summary of A given W < -1:> summary(obs$A[obs$W < -1])
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   1.254   2.741   2.669   4.088   5.000 
> cat("Summary of A given -1 < W <= 0:")
Summary of A given -1 < W <= 0:> summary(obs$A[-1 <= obs$W & obs$W < 0])
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.8499  2.2037  2.2727  3.5438  5.0000 
> cat("Summary of A given 0 < W <= 1:")
Summary of A given 0 < W <= 1:> summary(obs$A[0 <= obs$W & obs$W < 1])
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.4749  1.8339  1.9668  3.1543  5.0000 
> cat("Summary of A given 1 < W:")
Summary of A given 1 < W:> summary(obs$A[1 <= obs$W])
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   0.000   1.266   1.553   2.630   5.000 
> 
> 
> par(mfrow=c(2,4))
> hist(obs$W)
> hist(obs$A)
> plot(obs$W,obs$A)
> plot(obs$A,obs$Z)
> plot(obs$Z,obs$Y)
> plot(obs$W,obs$Z)
> plot(obs$W,obs$Y)
> plot(obs$A,obs$Y)
> 
> 
> ## ----true_psi_sys2-------------------------------------------------------------------------------------------------------------------
> # Getting trul value of psi
> #------------------------------------------------------------------------------------
> # a_vec <- seq(0,5,0.1)
> # psi0_a_0 <- c()
> # psi0_a_1 <- c()
> # 
> # N = 10000
> # data_0_0 <- generate_data_2(n=N, a=0, z=0)
> # data_0_1 <- generate_data_2(n=N, a=0, z=1)
> # 
> # for (i in 1:length(a_vec)) {
> #   a <- a_vec[i]
> # 
> #   data_a_0 <- generate_data_2(n=N, a=a, z=0)
> #   psi0_a_0[i] <- mean(data_a_0$Y - data_0_0$Y)
> # 
> #   data_a_1 <- generate_data_2(n=N, a=a, z=1)
> #   psi0_a_1[i] <- mean(data_a_1$Y - data_0_1$Y)
> # }
> # 
> # psi0_pnt <- data.frame(a=rep(a_vec, 2), z=c(rep(1,length(a_vec)), rep(0,length(a_vec))), psi0 = c(psi0_a_1,psi0_a_0))
> # psi0_10pnt <- psi0_pnt[psi0_pnt$a %in% seq(0.5,5,0.5),]
> # 
> # save.image(file=here("data", "rdata", "02_simu_V3_sys2_psi0.RData"))
> #------------------------------------------------------------------------------------
> load(file=here("data", "rdata", "02_simu_V3_sys2_psi0.RData"))
> # source(here("scripts", "scripts_v3", "1_simu_functions.R"))
> #------------------------------------------------------------------------------------
> 
> 
> p <- ggplot() +
+     geom_line(data=psi0_pnt %>% mutate(z = as.factor(z)), aes(x=a, y=psi0, color=z, group=z)) +
+     geom_point(data=psi0_10pnt %>% mutate(z = as.factor(z)), aes(x=a, y=psi0, color=z, group=z)) +
+     labs(x="a", y="ATE",
+          title = "True Average Treatment Effect \n  P_0(E[Y|a,z] - E[Y|0,z])") +
+         theme(plot.title = element_text(hjust = 0.5), #size=8.6,
+               #axis.title.y = element_blank(),
+               panel.grid.major.x = element_blank(),
+               #axis.text.y = element_text(size=8),
+               #axis.title.x = element_text(size=8),
+               axis.text = element_text(size=7))
> 
> p
> 
> 
> 
> ## ----simu_sys2_n50-------------------------------------------------------------------------------------------------------------------
> nn=50
> 
> 
> ## ------------------------------------------------------------------------------------------------------------------------------------
> # load(here("data", "rdata", "02_simu_V3_sys2_50_CV.RData"))
> # source(here("scripts", "scripts_v3", "1_simu_functions.R"))
> 
> 
> ## ----simu_sys2_n50_1_cv, fig.width=6, fig.height=4-----------------------------------------------------------------------------------
> set.seed(123)
> results_50 <- run_simu_1round(generate_data_2, n=nn)
> 
> psi_10pnt <- merge(as.data.frame(psi0_10pnt), as.data.frame(results_50), by=c("a", "z"))
> 
> cat(paste0("CV selected lambda (from one sample): ", unique(psi_10pnt$lambda)))
CV selected lambda (from one sample): 0.0198714531342128> 
> 
> p1 <- plot_perforences_1lambda_alla(psi_10pnt, z_para=1, est_plot_only = T) +
+   labs(title = "z=1") + theme(plot.title = element_text(hjust = 0.5))
> p0 <- plot_perforences_1lambda_alla(psi_10pnt, z_para=0, est_plot_only = T) +
+   labs(title = "z=0") + theme(plot.title = element_text(hjust = 0.5))
> 
> p <- grid.arrange(p1, p0, nrow=1,
+                   top = textGrob(paste0("Average Treatment Effect,  E[Y|a,z] - E[Y|0,z]",
+                                          gp=gpar(fontface = 'bold')))) # gp=gpar(fontsize=11, fontface = 'bold')
> 
> 
> ## ----simu_sys2_n50_B_cv, fig.width=6, fig.height=7-----------------------------------------------------------------------------------
> set.seed(123)
> simu_results <- run_simu_rep(generate_data_2, n=nn, B=1000, return_all_rslts=T)
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
Warning message:
from glmnet Fortran code (error code -95); Convergence for 95th lambda value not reached after maxit=100000 iterations; solutions for larger lambdas returned 
> cat(paste0("The average of CV selected lambdas (from 1000 sample): ", unique(simu_results$result_summary$lambda)))
The average of CV selected lambdas (from 1000 sample): 0.0196135234410873 The average of CV selected lambdas (from 1000 sample): 0.0195494261017948 The average of CV selected lambdas (from 1000 sample): 0.0195701963312569> 
> 
> cat("z=1:")
z=1:> p1_list <- plot_perforences_1lambda_alla(simu_results$result_summary, z_para=1, plot_list=F, add_oracal=T)
> cat("z=0:")
z=0:> p0_list <- plot_perforences_1lambda_alla(simu_results$result_summary, z_para=0, plot_list=F, add_oracal=T)
> 
> save.image(file=here("data", "rdata", "02_simu_V3_sys2_50_CV.RData"))
> 
> 
> ## ----simu_sys2_n50_B_cv_qq, fig.width=6, fig.height=4--------------------------------------------------------------------------------
> p1 <- estimation_qqplot(results_list = simu_results$all_results, z_para = 1)
> p1
> p0 <- estimation_qqplot(results_list = simu_results$all_results, z_para = 0)
> p0
> 
> 
> ## ----simu_sys2_n50_1_u, fig.width=6, fig.height=4------------------------------------------------------------------------------------
> set.seed(123)
> n = nn
> results_50_under <- run_simu_1round(generate_data_2, n=nn, undersmooth=T)
> 
> psi_10pnt <- merge(as.data.frame(psi0_10pnt), as.data.frame(results_50_under), by=c("a", "z"))
> cat(paste0("Undersmoothed lambda: ", unique(psi_10pnt$lambda), "\n which is ", unique(psi_10pnt$lambda_scaler), " * lambda_CV"))
Undersmoothed lambda: 0.00960373467366986
 which is 1 * lambda_CV> 
> 
> p1 <- plot_perforences_1lambda_alla(psi_10pnt, z_para=1, est_plot_only = T) +
+   labs(title = "z=1") + theme(plot.title = element_text(hjust = 0.5))
> p0 <- plot_perforences_1lambda_alla(psi_10pnt, z_para=0, est_plot_only = T) +
+   labs(title = "z=0") + theme(plot.title = element_text(hjust = 0.5))
> 
> p <- grid.arrange(p1, p0, nrow=1,
+                   top = textGrob(paste0("Average Treatment Effect,  E[Y|a,z] - E[Y|0,z]",
+                                          gp=gpar(fontface = 'bold')))) # gp=gpar(fontsize=11, fontface = 'bold')
> 
> 
> ## ----simu_sys2_n50_B_u, fig.width=6, fig.height=7------------------------------------------------------------------------------------
> set.seed(123)
> 
> simu_results <- run_simu_rep(generate_data_2, n=nn, B=1000, return_all_rslts=T,  undersmooth=T)
Error: Matrices must have same number of columns in rbind2(.Call(dense_to_Csparse, x), y)
In addition: Warning messages:
1: from glmnet Fortran code (error code -93); Convergence for 93th lambda value not reached after maxit=100000 iterations; solutions for larger lambdas returned 
2: from glmnet Fortran code (error code -1); Convergence for 1th lambda value not reached after maxit=100000 iterations; solutions for larger lambdas returned 
3: In getcoef(fit, nvars, nx, vnames) :
  an empty model has been returned; probably a convergence issue
4: from glmnet Fortran code (error code -1); Convergence for 1th lambda value not reached after maxit=100000 iterations; solutions for larger lambdas returned 
5: In getcoef(fit, nvars, nx, vnames) :
  an empty model has been returned; probably a convergence issue
Execution halted
