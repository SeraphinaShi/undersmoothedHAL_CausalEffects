
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## ----load_lib, include = FALSE, warning=FALSE, message=FALSE, echo=FALSE-------------------------------------------------------------
> library(here)
here() starts at /home/seraphinashi/undersmoothedHAL_CausalEffects
> library(data.table)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:data.table’:

    between, first, last

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tidyr)
> library(foreach)
> 
> library(stringr)
> library(glmnet)
Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loaded glmnet 4.1-3
> 
> library(origami)
origami v1.0.5: Generalized Framework for Cross-Validation
> library(hal9001)
Loading required package: Rcpp
hal9001 v0.4.3: The Scalable Highly Adaptive Lasso
note: fit_hal defaults have changed. See ?fit_hal for details
> library(tictoc)

Attaching package: ‘tictoc’

The following object is masked from ‘package:data.table’:

    shift

> 
> library(R.utils)
Loading required package: R.oo
Loading required package: R.methodsS3
R.methodsS3 v1.8.1 (2020-08-26 16:20:06 UTC) successfully loaded. See ?R.methodsS3 for help.
R.oo v1.24.0 (2020-08-26 16:11:58 UTC) successfully loaded. See ?R.oo for help.

Attaching package: ‘R.oo’

The following object is masked from ‘package:R.methodsS3’:

    throw

The following objects are masked from ‘package:methods’:

    getClasses, getMethods

The following objects are masked from ‘package:base’:

    attach, detach, load, save

R.utils v2.12.0 (2022-06-28 03:20:05 UTC) successfully loaded. See ?R.utils for help.

Attaching package: ‘R.utils’

The following object is masked from ‘package:tidyr’:

    extract

The following object is masked from ‘package:utils’:

    timestamp

The following objects are masked from ‘package:base’:

    cat, commandArgs, getOption, isOpen, nullfile, parse, warnings

> 
> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:stats’:

    cov, smooth, var

> 
> library(ggplot2)
> library(cowplot)
> library(gridExtra)

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> library(grid)
> 
> 
> ## ----setup, include = FALSE----------------------------------------------------------------------------------------------------------
> plotFolder <- here("results","images", "v3")
> if(!file.exists(plotFolder)) dir.create(plotFolder,recursive=TRUE)
> 
> knitr::opts_chunk$set(
+   cache=FALSE, autodep=FALSE, warning=FALSE, message=FALSE, echo=FALSE,
+   results = 'markup', dev='png', dpi=150, fig.align = "center", fig.path=paste0(plotFolder, "/"),
+   cache.path=".cache/",
+   duplicate.label="allow"
+ )
> 
> source(here("scripts", "scripts_v3", "1_simu_functions_hal9001.R"))
> source(here("scripts", "scripts_v3", "1_simu_functions.R"))
> 
> 
> ## ----check_sys1----------------------------------------------------------------------------------------------------------------------
> generate_data_1 <- function(n, a=NA, z=NA){
+   # exogenous variables
+   U_W <- rnorm(n, 0, 1)
+   U_A <- rnorm(n, 0, 2)
+   U_Z <- runif(n, 0, 1)
+   U_Y <- runif(n, 0, 1)
+   
+   # endogenous variables
+   W <- U_W
+   
+   if(is.na(a)){
+     A <-  2 - 0.5*W + U_A
+     A[A<=0] = 0
+     A[A>=5] = 5
+   } else {
+     A <- rep(a, n)
+   }
+   
+   if(is.na(z)){
+     Z <- as.numeric(U_Z < plogis(2-W-A))
+   } else {
+     Z <- rep(z, n)
+   }
+   
+   Y <- as.numeric(U_Y < plogis(W + 5*A + Z - 0.5 * W * A - 8))
+   
+   # data frame
+   O <- data.frame(W, A, Z, Y)
+   return(O)
+ }
> 
> obs <- generate_data_1(n=10000)
> print(summary(obs))
       W                   A                Z                Y         
 Min.   :-3.677975   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  
 1st Qu.:-0.675873   1st Qu.:0.6141   1st Qu.:0.0000   1st Qu.:0.0000  
 Median :-0.010563   Median :1.9997   Median :0.0000   Median :1.0000  
 Mean   :-0.003747   Mean   :2.1195   Mean   :0.4899   Mean   :0.5983  
 3rd Qu.: 0.667631   3rd Qu.:3.3860   3rd Qu.:1.0000   3rd Qu.:1.0000  
 Max.   : 3.680265   Max.   :5.0000   Max.   :1.0000   Max.   :1.0000  
>   
> # check positivity violations
> cat("Summary of A given W < -1:")
Summary of A given W < -1:> summary(obs$A[obs$W < -1])
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   1.464   2.735   2.699   4.109   5.000 
> cat("Summary of A given -1 < W <= 0:")
Summary of A given -1 < W <= 0:> summary(obs$A[-1 <= obs$W & obs$W < 0])
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.8124  2.1834  2.2680  3.5961  5.0000 
> cat("Summary of A given 0 < W <= 1:")
Summary of A given 0 < W <= 1:> summary(obs$A[0 <= obs$W & obs$W < 1])
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.4647  1.7413  1.9498  3.1508  5.0000 
> cat("Summary of A given 1 < W:")
Summary of A given 1 < W:> summary(obs$A[1 <= obs$W])
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   0.000   1.321   1.577   2.660   5.000 
> 
> par(mfrow=c(2,4))
> hist(obs$W)
> hist(obs$A)
> plot(obs$W,obs$A)
> plot(obs$A,obs$Z)
> plot(obs$Z,obs$Y)
> plot(obs$W,obs$Z)
> plot(obs$W,obs$Y)
> plot(obs$A,obs$Y)
> 
> glm_fit <- glm(formula = Y ~ W + A + W*A + Z,
+                family = binomial,
+                data = obs)
> summary(glm_fit)

Call:
glm(formula = Y ~ W + A + W * A + Z, family = binomial, data = obs)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-3.2602  -0.0676   0.0007   0.0604   3.7310  

Coefficients:
            Estimate Std. Error z value Pr(>|z|)    
(Intercept)  -7.9684     0.2538 -31.394  < 2e-16 ***
W             0.9272     0.1933   4.797 1.61e-06 ***
A             4.9315     0.1418  34.781  < 2e-16 ***
Z             1.0754     0.1178   9.131  < 2e-16 ***
W:A          -0.4418     0.1238  -3.568  0.00036 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 13473.9  on 9999  degrees of freedom
Residual deviance:  2650.8  on 9995  degrees of freedom
AIC: 2660.8

Number of Fisher Scoring iterations: 9

> y_preds <- predict(glm_fit, type = "response")
> mse <- sum((y_preds - obs$Y)^2)
> auc <- auc(obs$Y, y_preds)
Setting levels: control = 0, case = 1
Setting direction: controls < cases
> print(paste0("    MSE: ", round(mse, 4), ", AUC: ", round(auc, 4)))
[1] "    MSE: 403.2453, AUC: 0.9889"
> 
> 
> ## ----true_psi_sys1-------------------------------------------------------------------------------------------------------------------
> # Getting trul value of psi
> #------------------------------------------------------------------------------------
> # a_vec <- seq(0,5,0.1)
> # psi0_a_0 <- c()
> # psi0_a_1 <- c()
> # 
> # N = 1e+07
> # data_0_0 <- generate_data_1(n=N, a=0, z=0)
> # data_0_1 <- generate_data_1(n=N, a=0, z=1)
> # 
> # for (i in 1:length(a_vec)) {
> #   a <- a_vec[i]
> # 
> #   data_a_0 <- generate_data_1(n=N, a=a, z=0)
> #   psi0_a_0[i] <- mean(data_a_0$Y - data_0_0$Y)
> # 
> #   data_a_1 <- generate_data_1(n=N, a=a, z=1)
> #   psi0_a_1[i] <- mean(data_a_1$Y - data_0_1$Y)
> # }
> # 
> # psi0_pnt <- data.frame(a=rep(a_vec, 2), z=c(rep(1,length(a_vec)), rep(0,length(a_vec))), psi0 = c(psi0_a_1,psi0_a_0))
> # psi0_10pnt <- psi0_pnt[psi0_pnt$a %in% seq(0.5,5,0.5),]
> # save.image(file=here("data", "rdata", "02_simu_V3_sys1_psi0.RData"))
> #------------------------------------------------------------------------------------
> load(file=here("data", "rdata", "02_simu_V3_sys1_psi0.RData"))
> # source(here("scripts", "scripts_v3", "1_simu_functions.R"))
> #------------------------------------------------------------------------------------
> 
> 
> nn <- 500 
> 
> ## ----simu_sys1_n500_B_grid------------------------------------------------------------------------------------------------------------
> set.seed(123)
> 
> lambda_scalers <- c(1.2, 1.1, 10^seq(from=0, to=-3, length=30))
> 
> simu_results_lists <- list()
> for(i in 1:length(lambda_scalers)){
+   scaler = lambda_scalers[i]
+   simu_results_lists[[i]] <- run_simu_rep(generate_data_1, n=nn, B=1000, lambda_scaler=scaler, return_all_rslts=F,  undersmooth=F)
+ }
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'a'. You can override using the `.groups` argument.
There were 50 or more warnings (use warnings() to see the first 50)
> simu_results_all <- do.call("rbind", simu_results_lists) %>% as.data.frame()
> 
> save.image(file=here("data", "rdata", "02_simu_V3_sys1_500_grid.RData"))
> 
> 
> proc.time()
    user   system  elapsed 
519907.5 208529.3 271846.6 
